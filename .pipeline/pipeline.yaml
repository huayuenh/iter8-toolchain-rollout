---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: iter8-pipeline
spec:
  params:
    - name: repository
      description: the git repo
    - name: branch
      description: the branch for the git repo
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: path-to-dockerfile
      default: '.'
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: registry-namespace
      description: container registry namespace
    - name: app-name
      description: application name
    - name: image-name
      description: image name
    - name: dev-region
    - name: dev-resource-group
    - name: apikey
    - name: cluster-name
      description: the name of the cluster to target
    - name: dev-cluster-namespace
      description: the namespace
    - name: pipeline-debug
      default: "0"
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "toolchain-apikey"
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: extract-doi-enablement
      taskRef:
        name: toolchain-extract-value
      params:
        # count the number of service in the toolchain that are DevopsInsights
        - name: expression
          value: 'reduce .services[] as $service (0; if $service.service_id=="draservicebroker" then .+1 else . end)'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: publish-doi-buildrecord
      runAfter: [git-clone]
      taskRef:
        name: doi-publish-buildrecord
      conditions:
        - conditionRef: utils-evaluate
          params:
            - name: value
              value: $(tasks.extract-doi-enablement.results.extracted-value)
            - name: expected
              value: "1"
      params:
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: app-name
          value: $(params.app-name)
        - name: git-repository
          value: $(tasks.git-clone.results.git-repository)
        - name: git-branch
          value: $(tasks.git-clone.results.git-branch)
        - name: git-commit
          value: $(tasks.git-clone.results.git-commit)
    - name: docker-lint
      runAfter: [git-clone]
      taskRef:
        name: docker-lint
      params:
        # - name: hadolint-ignored-rules
        #   value: "DL3017,DL3020,DL3003"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: fail-on-lint-errors
          value: "false"
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: containerize
      runAfter: [docker-lint]
      taskRef:
        name: icr-cr-build
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: registry-region
          value: $(params.registry-region)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: image-name
          value: $(params.image-name)
        - name: path-to-context
          value: $(params.path-to-dockerfile)
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        # - name: additional-tags
        #  value: 'latest'
        - name: additional-tags-script
          value: |
            # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
            # e.g. 3-master-50da6912-20181123114435
            # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
            GIT_BRANCH="$(tasks.git-clone.results.git-branch)"
            GIT_COMMIT="$(tasks.git-clone.results.git-commit)"
            TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
            IMAGE_TAG=${TIMESTAMP}
            if [ ! -z "${GIT_COMMIT}" ]; then
              GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 ) 
              IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
            fi
            if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
            IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}          
            echo "$IMAGE_TAG"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: vulnerability-advisor
      taskRef:
        name: icr-check-va-scan
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: scan-report-file
          value: 'app-image-va-report.json'
        # - name: max-iteration
        #   value: '5'
        # - name: sleep-time
        #   value: '3'
        # - name: fail-on-scanned-issues
        #   value: 'false'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: image-url
          value: $(tasks.containerize.results.image-repository)
        - name: image-digest
          value: $(tasks.containerize.results.image-digest)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: check-istio-config
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [vulnerability-advisor]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: script
          value: |
            #!/bin/bash
            # uncomment to debug the script
            # set -x

            # copy the script below into your app code repo (e.g. ./scripts/istio_check_install.sh) and 'source' it from your pipeline job
            #    source ./scripts/istio_check_install.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/istio_check_install.sh")

            # Check Istio installation in target cluster
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/istio_check_install.sh")
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: check-iter8-config
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [check-istio-config]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: script
          value: |
            #!/bin/bash
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/iter8_check_install.sh) and 'source' it from your pipeline job
            #    source ./scripts/iter8_check_install.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/iter8_check_install.sh")

            # Check Istio installation in target cluster
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/iter8_check_install.sh")
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: check-dashboard-config
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [check-iter8-config]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: script
          value: |
            #!/bin/bash
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/grafana_check_install.sh) and 'source' it from your pipeline job
            #    source ./scripts/grafana_check_install.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/grafana_check_install.sh")

            # TODO - Needs to revisit Grafana metrics add-on
            # currently failing with unauthorized
            kubectl -n istio-system port-forward $(kubectl -n istio-system get pod -l app=grafana -o jsonpath='{.items[0].metadata.name}') 3000:3000&

            # Check Istio installation in target cluster
            GRAFANA_URL=${ROLLOUT_DASHBOARD}
            DASHBOARD_DEFN="/tmp/istio.json"
            curl -sSL https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/istio.json -o $DASHBOARD_DEFN
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/grafana_check_install.sh")
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: check-app-config
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [check-dashboard-config]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
            export HOST=''
        - name: script
          value: |
            #!/bin/bash
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/bookinfo_check_install.sh) and 'source' it from your pipeline job
            #    source ./scripts/bookinfo_check_install.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/bookinfo_check_install.sh")

            # Check Istio installation in target cluster
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/bookinfo_check_install.sh")
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: prepare-candidate-rollout
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [check-app-config]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export EXPERIMENT_TEMPLATE_FILE="iter8/experiment.yaml"
            export EXPERIMENT_NAME=''
            # Single tag for the image built
            export IMAGE_TAG=$IMAGE_TAGS
            # Keep it in build.properties shuttle file
            echo "IMAGE_TAG=$IMAGE_TAGS" >> build.properties
            echo "================"
            cat build.properties
            echo "================"
        - name: script
          value: |
            #!/bin/bash
            # uncomment to debug the script
            # set -x

            # Identify experiment name to use
            if [ -z "${EXPERIMENT_TEMPLATE_FILE}" ]; then EXPERIMENT_TEMPLATE_FILE=iter8_experiment.yaml ; fi
            if [ ! -f ${EXPERIMENT_TEMPLATE_FILE} ]; then
              echo -e "${red}iter8 experiment template '${EXPERIMENT_TEMPLATE_FILE}' not found${no_color}"
            fi

            export EXPERIMENT_NAME=$(yq read ${EXPERIMENT_TEMPLATE_FILE} metadata.name)-${GIT_BRANCH}-${BUILD_NUMBER}
            echo "EXPERIMENT_NAME=${EXPERIMENT_NAME}"

        - name: post-execution-script
          value: |
            # Record names in build.properties for use by later stages
            #   append to existing build.properties if already defined
            echo "EXPERIMENT_NAME=${EXPERIMENT_NAME}" >> build.properties
            cat build.properties
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: configure-rollout
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [prepare-candidate-rollout]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
            export API_KEY="$(params.apikey)"
            export buildprops="build.properties"
            export PROD_REGION_ID=$(params.dev-region)
            export PROD_RESOURCE_GROUP=$(params.dev-resource-group)
            export PROD_CLUSTER_NAME=$(params.cluster-name)
            export ROLLOUT_DASHBOARD=$ROLLOUT_DASHBOARD
            export PATCH_FILE="kustomize/patch.yaml"
            export EXPERIMENT_TEMPLATE_FILE="iter8/experiment.yaml"
            # pipeline build number is the doi build record id (if any)
            export SOURCE_BUILD_NUMBER=$BUILD_NUMBER
            echo "SOURCE_BUILD_NUMBER=$BUILD_NUMBER" >> build.properties
            # For doi plugin invocation if needed
            export TOOLCHAIN_ID=$PIPELINE_TOOLCHAIN_ID
            # Single tag for the image built
            export IMAGE_TAG=$IMAGE_TAGS
            # Keep it in build.properties shuttle file
            echo "IMAGE_TAG=$IMAGE_TAGS" >> build.properties
            echo "================"
            cat build.properties
            echo "================"
        - name: script
          value: |
            #!/bin/bash
            # uncomment to debug the script
            # set -x

            # Identify canary deployment name from the deployment yaml
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/create_deployment.sh")
            CANDIDATE_DEPLOYMENT_NAME=$(yq r ${DEPLOYMENT_FILE} metadata.name)

            # Identify baseline deployment by searching the cluster
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/identify_stable.sh")
            if [[ -z $BASELINE_DEPLOYMENT_NAME ]]; then BASELINE_DEPLOYMENT_NAME=$CANDIDATE_DEPLOYMENT_NAME; fi

            # Run canary experiment using iter8
            echo "BASELINE_DEPLOYMENT_NAME=${BASELINE_DEPLOYMENT_NAME}"
            echo "CANDIDATE_DEPLOYMENT_NAME=$CANDIDATE_DEPLOYMENT_NAME"
            ON_SUCCESS=candidate
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/create_experiment.sh")
        - name: post-execution-script
          value: |
            # Keep APP_URL in build.properties shuttle file
            echo "APP_URL=$APP_URL" >> build.properties
            cat build.properties
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: pre-deploy-check
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [configure-rollout]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
            export API_KEY="$(params.apikey)"
            export buildprops="build.properties"
            export PROD_REGION_ID=$(params.dev-region)
            export PROD_RESOURCE_GROUP=$(params.dev-resource-group)
            export PROD_CLUSTER_NAME=$(params.cluster-name)
            export ROLLOUT_DASHBOARD=$ROLLOUT_DASHBOARD
            export PATCH_FILE="kustomize/patch.yaml"
            export EXPERIMENT_TEMPLATE_FILE="iter8/experiment.yaml"
            # pipeline build number is the doi build record id (if any)
            export SOURCE_BUILD_NUMBER=$BUILD_NUMBER
            echo "SOURCE_BUILD_NUMBER=$BUILD_NUMBER" >> build.properties
            # For doi plugin invocation if needed
            export TOOLCHAIN_ID=$PIPELINE_TOOLCHAIN_ID
            # Single tag for the image built
            export IMAGE_TAG=$IMAGE_TAGS
            # Keep it in build.properties shuttle file
            echo "IMAGE_TAG=$IMAGE_TAGS" >> build.properties
            echo "================"
            cat build.properties
            echo "================"
        - name: script
          value: |
            #!/bin/bash
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/check_predeploy.sh) and 'source' it from your pipeline job
            #    source ./scripts/check_predeploy_kubectl.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_predeploy_kubectl.sh")

            # Checks the cluster is ready, has a namespace configured with access to the private
            # image registry (using an IBM Cloud API Key). It also configures Helm Tiller service to later perform a deploy with Helm.
            touch ${DEPLOYMENT_FILE}
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_predeploy_kubectl.sh")
        - name: post-execution-script
          value: |
            # Keep APP_URL in build.properties shuttle file
            echo "APP_URL=$APP_URL" >> build.properties
            cat build.properties
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: deploy-to-kubernetes
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [pre-deploy-check]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
            export API_KEY="$(params.apikey)"
            export buildprops="build.properties"
            export PROD_REGION_ID=$(params.dev-region)
            export PROD_RESOURCE_GROUP=$(params.dev-resource-group)
            export PROD_CLUSTER_NAME=$(params.cluster-name)
            export ROLLOUT_DASHBOARD=$ROLLOUT_DASHBOARD
            export PATCH_FILE="kustomize/patch.yaml"
            export EXPERIMENT_TEMPLATE_FILE="iter8/experiment.yaml"
            # pipeline build number is the doi build record id (if any)
            export SOURCE_BUILD_NUMBER=$BUILD_NUMBER
            echo "SOURCE_BUILD_NUMBER=$BUILD_NUMBER" >> build.properties
            # For doi plugin invocation if needed
            export TOOLCHAIN_ID=$PIPELINE_TOOLCHAIN_ID
            # Single tag for the image built
            export IMAGE_TAG=$IMAGE_TAGS
            # Keep it in build.properties shuttle file
            echo "IMAGE_TAG=$IMAGE_TAGS" >> build.properties
            echo "================"
            cat build.properties
            echo "================"
        - name: script
          value: |
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/create_deployment.sh) and 'source' it from your pipeline job
            #    source ./scripts/create_deployment.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/create_deployment.sh")
            # Create canary deployment yaml
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/create_deployment.sh")

            # copy the script below into your app code repo (e.g. ./scripts/deploy_kubectl.sh) and 'source' it from your pipeline job
            #    source ./scripts/deploy_kubectl.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/deploy_kubectl.sh")
            # Create canary deployment yaml
            USE_ISTIO_GATEWAY=true
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/deploy_kubectl.sh")
            echo "Rollout Dashboard:"
            kubectl --namespace ${CLUSTER_NAMESPACE} get experiments.iter8.tools ${EXPERIMENT_NAME} --output jsonpath='{.status.grafanaURL}' || true
            echo ""
        - name: post-execution-script
          value: |
            # Keep APP_URL in build.properties shuttle file
            echo "APP_URL=$APP_URL" >> build.properties
            cat build.properties
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: wait-and-cleanup
      taskRef:
        name: iks-deploy-to-kubernetes
      runAfter: [deploy-to-kubernetes]
      params:
        - name: shuttle-properties-file
          value: "build.properties"
        - name: cluster-region
          value: $(params.dev-region)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: setup-script
          value: |
            export CLUSTER_NAMESPACE="$(params.dev-cluster-namespace)"
            export API_KEY="$(params.apikey)"
            export buildprops="build.properties"
            export PROD_REGION_ID=$(params.dev-region)
            export PROD_RESOURCE_GROUP=$(params.dev-resource-group)
            export PROD_CLUSTER_NAME=$(params.cluster-name)
            export ROLLOUT_DASHBOARD=$ROLLOUT_DASHBOARD
            export PATCH_FILE="kustomize/patch.yaml"
            export EXPERIMENT_TEMPLATE_FILE="iter8/experiment.yaml"
            # pipeline build number is the doi build record id (if any)
            export SOURCE_BUILD_NUMBER=$BUILD_NUMBER
            echo "SOURCE_BUILD_NUMBER=$BUILD_NUMBER" >> build.properties
            # For doi plugin invocation if needed
            export TOOLCHAIN_ID=$PIPELINE_TOOLCHAIN_ID
            # Single tag for the image built
            export IMAGE_TAG=$IMAGE_TAGS
            # Keep it in build.properties shuttle file
            echo "IMAGE_TAG=$IMAGE_TAGS" >> build.properties
            echo "================"
            cat build.properties
            echo "================"
        - name: script
          value: |
            #!/bin/bash
            # uncomment to debug the script
            # set -x
            # copy the script below into your app code repo (e.g. ./scripts/wait_complete.sh) and 'source' it from your pipeline job
            #    source ./scripts/wait_complete.sh
            # alternatively, you can source it from online script:
            #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/wait_complete.sh")

            # Check liveness and readiness probes to confirm application is healthy
            source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/iter8-toolchain-rollout/master/scripts/wait_complete.sh")
        - name: post-execution-script
          value: |
            # Keep APP_URL in build.properties shuttle file
            echo "APP_URL=$APP_URL" >> build.properties
            cat build.properties
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws

